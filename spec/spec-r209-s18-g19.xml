<?xml version="1.0" encoding="UTF-8"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- do not display copyright and other IETF-related stuff -->
<?rfc private="(c) GROUP 19, 2018" ?>

<rfc category="info" docName="for the c2w application" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->

    <title abbrev="Abbreviated Title">Group 19: c2w protocol specification proposal
    </title>

    <!-- add 'role="editor"' below for the editors if appropriate -->


    <author fullname="Mesbahi Marwane Louis Faul" initials="M.M. L.F."
            surname="M.M. L.F.">
      <organization>Telecom Bretagne</organization>

      <address>
        <postal>
          <street></street>

          <!-- Reorder these if your country does things differently -->

          <city>Brest</city>

          <region></region>

          <code></code>

          <country>France</country>
        </postal>



        <email>marwane.mesbahi@telecom-bretagne.eu</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date month="02" year="2018" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
	 in the current day and month for you. If the year is not the current one, it is
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to
	 specify just the year. -->

    <keyword>c2w</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>This document provides the specification of the c2w protocol which is used in an application 
      based on the client-server model : c2w. This application enables to chat with each user in the 
      same room  , whether you are watching a movie or not.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>Our specification presents the c2w protocol , a transport layer protocol which goal is to enable to chat while watching a movie.
First the client has to logging in the c2w application by specifying the IP Address and the port of the server and choosing his username . 
If the login request is successful , the client enter the mainroom and the server sends him two structured list : one for the movies and 
one for the others users with their availability . The client can either chat with other users who are in the mainroom ,click in order to
 watch the movie he wants, or disconnect him by clicking on the button leave.
Once in a movie room the server sends the list of the others users in this room and the client can chat with them. A leave button enables 
to quit this movie room and return to the mainroom.
The c2w protocol enables working either with reliable transport protocols as TCP or unreliable ones as UDP.
For the sake of simplicity we have only used two types of message formats : one for the login and  an other for the rest of the protocol.</t>

    </section>

    <section title="Packet format :Server ">
    <t>
   We are using two general types of formats, one for the server and the other for the client
    </t>
	<t>
    Here is the packet fomat of the message used by the server :
    </t>
    <t>
    <figure align="center" anchor="sample_pkt">
    <artwork>

     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |  Text  length                 |                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+              
    |    sequence number            | type        |                 |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    .                             text                              .
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        </artwork></figure></t>
    <t>
	<list style='hanging'>
    <t hangText="Text length ( 16 bits )">
    <vspace blankLines='1'/>
           this field specifies the total length in bytes of the text field.
    </t>    
	<t hangText="Sequence number (16 bits )">
    <vspace blankLines='1'/>
	    Initiated with the same value of the last sequence sent by client, it is incremented by 1 in
	    each time the server receives the corresponding acknowledge from the client. If the server 
	    doesn't receive a response, after making a request, from the client within moments, the server
	    sends back the same message with the same sequence number.
	</t>
    <t hangText="Type ( 7 bits )">
    <vspace blankLines='1'/>
	This field allows the client to know what type of text is sent :
	</t>
    <t>                       
		the first bit corresponds to the message type :
	</t>
	<t>
	if it is 0, it means that it's a control message (connection accepted, connection failed...), all 
	the other bits are set to 0
	</t>
	<t>
	if it is 1, it means that it's a message sent to the client when he's already logged in.</t>
	<t>
		the 3 bits after that  define the type of the action, it is usually set by the client and the 
		server, as a response uses the same 3 bits.
		</t>
	<t>
		   000 : it is used when a new user has logged in, and the server notifies the other client by sending
	 a message.
	</t>
	<t>001 : the server uses this to inform the client whether he succefully logged out or not. the client 
	uses the same type.
	</t>
	<t>011 : the server sends the text to the client when he wants to leave the room (movie).</t>
	<t>010 : the server sends the message given by the client in the chatbox to all the other users in the
	 same room.</t>
	<t>110 : the server sends 	a response to the client when he clicks on a film in the movie list.</t>
		
	<t>the last 3 bits  refer to the room where the message is supposed to be sent :</t>
	<t>000 : the main room</t>
	<t>001 : film number 1 (room 1)</t>
	<t>011 : film number 2 (room 2)</t>
	<t>...</t>
	<t>...</t>
	
	
	<t hangText="Text (variable length)">
    <vspace blankLines='1'/>                                  
	    	It is the response sent by the server to the client, it can whether be a positive response 
	    	( successfully logged in for example) or a negative one ( username already used. too many users 
	    	are currently on, try later ...) encoded in ASCII. 
	</t>
	</list></t>      
    </section>

    <section title="Packet format : Client">
    <t>
    Here is the packet fomat of the message used by the client :
    </t>

    <t>
    <figure>
    <artwork>
0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    | message/name length           |                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+              
    |    sequence number            | type        |                 |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    .                             text                              .
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|

    </artwork></figure></t>
    <t>
	<list style='hanging'>
    <t hangText="Message length ( 16 bits )">
    <vspace blankLines='1'/>
    this field specifies the total length in bytes of the Message field.
	</t>
	<t hangText="Sequence number (16 bits )">
	<vspace blankLines='1'/>
	initiated with the last value in the last message received by the server +1 (incremented by 1) and has the same behavior as the last one.
	</t>
	<t hangText="Type ( 7 bits )">
    <vspace blankLines='1'/>
    This field allows the server to know what type of text is sent :</t>
    <t>-the first bit refers whether it's a log in action or not :</t>
    <t>0 : it means that's a log in action, (the client insert his username in the Message/Name field)( the other bits are set to 0)</t>
    <t>1 : it means that's not a log in action :	</t>
    <t>-the 3 bits after specify to the server what type of action the client wants to do :</t>
			<t>001 : it's a message refering that the user wants to log out. (in this case the message field is empty and the length field is set to '0')</t>
			<t>011 : it's a message sent to the server saying that the user wants to leave the room (the movie) (in this case the message field is empty)</t>
			<t>010 : the client sends a message in the chatbox to all the users in the same room. (the message is written in the Message field)</t>
			<t>110 : the client clicks on a movie. (in this case the message field is empty)</t>
		<t>-the last 3 bits refer to the room where the user is situated :</t>
			<t>000 : the main room</t>
			<t>001 : film number 1 (room 1)</t>
			<t>011 : film number 2 (room 2)</t>
			<t>...</t>
			<t>...</t>
			 
	<t hangText="Text (variable length)">
    <vspace blankLines='1'/>                                  
	    	It is the message (real message or username) sent by the client to the server, it can whether be a log in text or a message sent in the chat room encoded in ASCII. 
	</t>
	</list></t>
	</section>
	<section title="log in example">
	<t>
    EXAMPLES:
    </t>

    <t>Error messages used by the server in the login section :</t>
    <t>CASE 1 : change your username :</t>
	<t>
    <figure>
    <artwork>

     Client                                            Server                           	
        |                                               |                                
        |             Message 1 (Request)               |                                
    1   |----------------------------------------------&gt;| 2
        |             ( username0)                      |
        |                                               |
        |                                               |
        |        ERROR (username already used)          |
     4  |&lt;----------------------------------------------| 3
        |                   (ACK0)                      |
        |                                               |
        |             Message 2 (Request)               |                                
     5  |----------------------------------------------&gt;| 6
        |             (username1,s1)                  |
     	|                                               |
        |        Response (successefully logged in)     |
     8  |&lt;----------------------------------------------| 7
        |                   (ACK1)                      |



   </artwork></figure></t>

	<t>1 : The client puts a username and asks to log in.</t>
	<t>2 : the server compares this username with the list of used usernames the username is already used </t>
	<t>3: Error message : username already used, please change it </t>
	<t>4 : the error message is received</t>
	<t>5 : the client changes his username and tries again</t>
	<t>6 : the server compares it to his already used usernames the username is not used at the moment</t>
	<t>7 : message sent : you are successfully logged in as : username1</t>
	<t>8 : message is received</t>
	
	
	<t>CASE 2 :  Error message : Too many people are logged in at this moment, try later :</t>
	<t>
    <figure>
    <artwork>
 

     Client                                            Server                           	
        |                                               |                                
        |             Message 1 (Request)               |                                
     1  |----------------------------------------------&gt;| 2
        |             (username0,s0)                    |
        |                                               |
        |                                               |
        |        ERROR (message )                       |
      4 |&lt;----------------------------------------------| 3
        |                   (ACK0)                      |
		|                                               |
		
		
    </artwork></figure></t>
	
	<t>1 : the client logs in with a username</t>
	<t>2 : the server compares it with the other usernames </t>
	<t>3 : message sent : the maximum capacity of people logged in is reached (1024 places)</t>
	<t>4 : the message is received </t>
	
	
	<t>CASE 3 :  No response from the server</t>
	<t>
    <figure>
    <artwork>

     Client                                            Server                           	
        |                                               |                                
        |             Message 1 (Request)               |                                
     1  |-------------------------|                     | 2
        |             (username0)                       |
        |             Message 1 (Request)               |                                
     3  |-------------------------|                     |  4
        |             (username0)                       |
        |                                               |
        
		
		
    </artwork></figure></t>
	<t>1 : the client asks for a login permission</t>
	<t>2 : the message is not received </t>
	<t>3 : after some time, the client sends the same message again</t>
	<t>4 : the message is not received </t>
	<t>the client sends the same message for over 6 times, if there still is no response from the server,
	an error message is shown : failed to connect to the server, please verify the IP address and the port. </t>
    </section>
	<section title="General Example">
	<t> here is a simple example of a person client who wants to wach a movie (room 2) in application : </t>
	<t>  Once the user clicks on 'watch now' button, the client sends the following message to the server</t> 
	<t> the message sent to the server in hexadecimal notation : </t>
	<t> Text length : 0 </t>
	<t> Sequence number : 0100 , type : 1110000 </t>
	<t> After recieving this message, the server seeks for the that movie, once found it, he sends the following message</t>
	<t> ("your film is ready to watch") to the client :</t>
	<t>Text length : 27 </t>
	<t>Sequence number : 0100, type : 1110011 </t>
	<t>Text : 0x790x6f0x750x72 0x660x690x6c0x6d 0x690x73 0x720x650x610x640x79 0x740x6f 0x770x610x740x630x68 </t>
	<t> if this user sends a message in that room (2)(let's suppose the message is :'hi, i'm alice', here is the message sent to the server :</t>
	<t> Text length : 13 </t>
	<t> Sequence number : 0101, type : 1010011</t>
	<t> Text : 0x680x690x2c 0x690x270x6d 0x610x6c0x690x630x65</t>
	<t> the server then broadcasts this message to all the users situated in the same room as 'alice', he send the following message :</t>
	<t>Text length : 13 </t>
	<t>Sequence number (depends on each user), type : 1010011</t>
	<t>Text : 0x680x690x2c 0x690x270x6d 0x610x6c0x690x630x65</t>
    </section><!--End of examples-->
	<section title="Reliability">
	<t>Both the client and the server will have to increment two numbers S and R.Both numbers will be initiated to 0 . The number S will be send 
	in the message as sequence number and increment by one each time a message is sent. At the reception the sequence number will be compared to 
	the R number, if the sequence number is superior by one the message is treated, the R number implement by one and an acknowledge with this number 
	is sent. In the other case an error message is sent. Furthermore there will be a timer by the transmitter in order to send again the same message 
	if no response.</t>
	</section>

    <section title="xml2rfc Features">
      <t>In this sample file, the following sections show how to use some of the
      features of supported by xml2rfc.  This is a non-exhaustive list.  It is up
      to each group to decide which of these features (if any) to use in the
      protocol specification.</t>

      <t> This document is a modified version of the Internet-Draft template by
      Elwyn Davies, available on the IETF
      <xref target="IDSample"> website</xref>. </t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>This template was derived from an initial version written by Pekka
      Savola and contributed by him to the xml2rfc project.</t>

      <t>This document is part of a plan to make xml2rfc indispensable <xref
      target="DOMINATION"></xref>.</t>
    </section>

  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->


      <reference anchor="min_ref">
        <!-- the following is the minimum to make xml2rfc happy -->

        <front>
          <title>Minimal Reference</title>

          <author initials="authInitials" surname="authSurName">
            <organization></organization>
          </author>

          <date year="2006" />
        </front>
      </reference>
    </references>

    <references title="Informative References">
      <!-- Here we use entities that we defined at the beginning. -->
      <!-- A reference written by by an organization not a person. -->

      <reference anchor="DOMINATION"
                 target="http://www.example.com/dominator.html">
        <front>
          <title>Ultimate Plan for Taking Over the World</title>

          <author>
            <organization>Mad Dominators, Inc.</organization>
          </author>

          <date year="1984" />
        </front>
      </reference>

      <reference anchor="IDSample"
       target="http://tools.ietf.org/tools/templates/draft-davies-template-bare.txt">


        <front>
          <title>Internet Draft Sample</title>

          <author initials="E. D." surname="Davies">
            <organization></organization>
          </author>

          <date year="2006" />
        </front>
      </reference>
    </references>


    <section anchor="app-additional" title="Additional Stuff">
      <t>This becomes an Appendix.</t>
    </section>

    <!-- Change Log

v00 2006-03-15  EBD   Initial version

v01 2006-04-03  EBD   Moved PI location back to position 1 -
                      v3.1 of XMLmind is better with them at this location.
v02 2007-03-07  AH    removed extraneous nested_list attribute,
                      other minor corrections
v03 2007-03-09  EBD   Added comments on null IANA sections and fixed heading capitalization.
                      Modified comments around figure to reflect non-implementation of
                      figure indent control.  Put in reference using anchor="DOMINATION".
                      Fixed up the date specification comments to reflect current truth.
v04 2007-03-09 AH     Major changes: shortened discussion of PIs,
                      added discussion of rfc include.
v05 2007-03-10 EBD    Added preamble to C program example to tell about ABNF and alternative
                      images. Removed meta-characters from comments (causes problems).  -->
  </back>
</rfc>
